#!/usr/bin/env node

var app = require('../app');
var mongo = require('./mongo');
var fs = require('fs');
var http = require('http');
var https = require('https');
var config = require('./config');
var moment = require("moment");
var arm = process.arch === 'arm';
var cron = require('node-schedule');
var spawn = require('child_process').spawn;
var arch = process.arch;
var proc;

var probeSensorEnable = config.probeSensorEnable;
var tprobeSensor;

//use all_d to hold config.limit number of data sets for initial connections
var limit=config.limit, interval=config.interval, all_d=[];
var meteoHistory = [];

var sockets = {};

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || config.bindPort);

app.set('port', port);
app.set('domain', config.bindAddress);

/**
 * https key/cert
 */
var options;
if(arm){
	options = {
	  key: fs.readFileSync('/home/pi/hydra/file.pem'),
	  cert: fs.readFileSync('/home/pi/hydra/file.crt')
	};
}else{
	options = {
	  key: fs.readFileSync('./file.pem'),
	  cert: fs.readFileSync('./file.crt')
	};
}

/**
 * Create HTTP server.
 */
var serverHttps = https.createServer(options,app).listen(port);

/**
 * Listen on provided port, on all network interfaces.
 */

serverHttps.on('error', onError);
serverHttps.on('listening', onListening);

var io = require('socket.io').listen(serverHttps);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	var addr = serverHttps.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	console.log('Listening on ' + bind);
}

//mongo.findAll('water',waterData,function(err,response){
//	if(err) console.log(err);
//	//console.log('notify heat service with value ' + value);
//	//if(heatservice)
//		//heatservice.monitor(value);
//    //console.log('water2Data response ' + response);
//	io.sockets.emit('waterData', response); 
//});

/**
 * Service
 */
var channelServices = [];

//var query = mongo.getAllChannels();

var channels = require('./service/channels');
var query = channels.getAllChannels();

var promise = query.exec();
var Channel = require('./service/channelservice');
var Scheduled = require('./service/scheduled');

promise.addBack(function (err, inputs) {
    if(err)
        console.log(err);
    var i;
    for (i in inputs) {
    	var ch = new Channel(inputs[i]);
		var scheduled = new Scheduled(ch);
    	channelServices.push(scheduled);
		//if(ch.enable)
		scheduled.start();
    }
});	


if(arm){
	if(config.dhtEnable){
		var sensorLib = require('node-dht-sensor');

		var sensor = {
			initialize : function() {
				var dhtSensor = sensorLib.initialize(config.dhtVersion, config.dhtPin);
				console.log('initializing DHT:' + config.dhtVersion + ' sensor on pin:'	+ config.dhtPin);
				return dhtSensor;
			},
			read : function() {
				var readout = sensorLib.read();
				var temperatureData = readout.temperature.toFixed(2);
				var humidityData = readout.humidity.toFixed(2);
				console.log('DHT TEMP: ' +temperatureData + ' HUMD: ' +humidityData + ' @ ' + moment().format());
				
				var meteoData = {
					temperature : temperatureData,
					humidity : humidityData
				};

				mongo.create('meteo',meteoData,function(err,response){
					if(err) console.log(err);
					io.sockets.emit('meteoData', response); 
					
					//console.log('channelServices ' + channelServices.length);
		    		for (var x = 0; x < channelServices.length; x++) {
		    			var currentScheduled = channelServices[x];
		    			//console.log('Notify channel name=' + currentScheduled.getService().getChannel().name);
		    			if(currentScheduled.getService().getChannel().enable)
		    				currentScheduled.getService().monitorTemperature(meteoData);
		    		}

				});
				
				setTimeout(function() {
					sensor.read();
					if(probeSensorEnable)
						probeWaterSensor();
				}, config.dhtTimeout);
			}
		};

		if (sensor.initialize()) {
			sensor.read();
		} else {
			console.warn('Failed to initialize sensor');
		}
	}else{
		if(probeSensorEnable){
			cron.scheduleJob( config.probeTimeout + ' * * * * *', function(){
				probeWaterSensor();	
			});			
		}
	}
}else{
	setInterval(function updateRandom() {
		mongo.create('water',{water: getRandom(15, 24).toFixed(2)},function(err,response){
			if(err) console.log(err);
			//console.log('emit water1Data ' +response);
			io.sockets.emit('waterData', response); 

		});
		var meteoData = {
			temperature : getRandom(21, 27).toFixed(2),
			humidity : getRandom(40, 80).toFixed(2)
		};
		mongo.create('meteo',meteoData,function(err,response){
			if(err) console.log(err);
			io.sockets.emit('meteoData', response); 
			
		});
		mongo.create('cpuData',{cpuData: getRandom(40,50).toFixed(2)},function(err,response){
			if(err) console.log(err);
			io.sockets.emit('cpuData', response); 
		});	
		for (var x = 0; x < channelServices.length; x++) {
			var currentScheduled = channelServices[x];
			//console.log('Notify channel name=' + currentScheduled.getService().getChannel().name);
			if(currentScheduled.getService().getChannel().enable)
				currentScheduled.getService().monitorTemperature(meteoData);
		}
	}, config.dhtTimeout);
}

var clients = [];

io.sockets.on('connection', function(socket) {
	
	// Adds socket to list of sockets
	clients.push(socket);
	
	sockets[socket.id] = socket;
	console.log('Client connected ' + socket.id);
	
	for (var x = 0; x < channelServices.length; x++) {
		var currentSrv = channelServices[x];
		var currentChannelService = currentSrv.getService();
		currentChannelService.addSocket(socket);
		var y = x+1;
		io.sockets.emit('initChannel', currentChannelService.getChannel(),y); 
	}
	
	socket.on('open',function(channel){
		console.log('got open ' +channel.name +' enable ' + channel.enable);
		
	});
	
	socket.on('channel', function(channel){
		console.log('got command for channel ' +channel.name +' enable ' + channel.enable);
		
		for (var x = 0; x < channelServices.length; x++) {
			var currentSrv = channelServices[x];
			if(currentSrv.getService().getChannel().name == channel.name){
				console.log('found channel ' + channel.name);
				if(channel.enable){
					currentSrv.start();
				}else{
					currentSrv.stop();
				}
//				if(channel.enable){
//					if(!currentSrv.getService().isOpen()){
//						currentSrv.getService().open();
//					}						
//				}else{
//					if(currentSrv.getService().isOpen()){
//						currentSrv.getService().close();
//					}
//				}
			}
		}
	});
//	socket.on('disconnect', function() {
//		delete sockets[socket.id];
//	});
	
	// Removes socket from list of sockets
	socket.on('disconnect', function() {
		clients.splice(clients.indexOf(socket), 1);
	});
});

process.on('SIGTERM', function() {
    console.log("\nShutdown..");
	for (var x = 0; x < channelServices.length; x++) {
		var currentSrv = channelServices[x];
		currentSrv.stop();
	}    	
    console.log("Exiting...");
    process.exit();
});


function getRandom(min, max) {
	return min + Math.floor(Math.random() * (max - min + 1));
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

function probeWaterSensor(){
	try {
		if(arm){
			if(!tprobeSensor)
				tprobeSensor = require('./ds18x20');
			var value = tprobeSensor.probe('28-000005e66282');
			if(value){
				console.log('PROBE TEMP: ' + value + ' @ ' + moment().format() );
				var waterData = {water: ''+value};
				mongo.create('water',waterData,function(err,response){
					if(err) console.log(err);
					else{
			    		io.sockets.emit('waterData', response);
			    		for (var x = 0; x < channelServices.length; x++) {
			    			var currentScheduled = channelServices[x];
			    			//console.log('Notify channel name=' + currentScheduled.getService().getChannel().name);
			    			if(currentScheduled.getService().getChannel().enable)
			    				currentScheduled.getService().monitorWater(waterData);
			    		}
					}
				});			
			}
		}				
		
	}catch(err) {
	    console.log('error on probe ' +err);
	} 				
}


